LC 205 Isomorphic strings
class Solution {
    public boolean isIsomorphic(String s, String t) {

        int map1[]=new int[200];//map1 and map2 are two hash tables that will be used to keep track of the mappings between the characters of the two strings
        int map2[]=new int[200];

        if(s.length()!=t.length())
        return false;
        for(int i=0;i<s.length();i++){
            if(map1[s.charAt(i)]!=map2[t.charAt(i)])
            return false;////For each character, check if corresponding mappings in hash tables are the same. If they are not the same, then the method returns false
            map1[s.charAt(i)]=i+1;//Update the map1 and map2 hash tables with the current character and its index.
            map2[t.charAt(i)]=i+1;
        }
        return true;
    }
}
...............................................................
LC 14 longest common prefix
Arrays.sort(strs) sorts the input strings in ascending order.
String s1=strs[0] and String s2=strs[strs.length-1] get the first and last strings in the sorted array.
int idx=0 initializes the index variable.
while(idx<s1.length()&& idx<s2.length()) iterates over the two strings, comparing each character.
if(s1.charAt(idx)==s2.charAt(idx)) checks if the characters at the current index are the same.
If they are the same, then the index is incremented.
else breaks the loop.
return s1.substring(0,idx) returns the substring of the first string up to the index where the two strings differ.
class Solution {
    public String longestCommonPrefix(String[] strs) {
        Arrays.sort(strs);
        String s1=strs[0];
        String s2=strs[strs.length-1];
        int idx=0;
        while(idx<s1.length()&& idx<s2.length()){
            if(s1.charAt(idx)==s2.charAt(idx)){
                idx++;
            }else{
                break;
            }
        }
    return s1.substring(0,idx);
    }
}
String[] strs = {"flower", "flow", "flight"};
String longestCommonPrefix = new Solution().longestCommonPrefix(strs);

System.out.println(longestCommonPrefix);
..............................................................................
// Character array example
char[] chars = {'H', 'e', 'l', 'l', 'o', '!'};
System.out.println(chars); // Prints "Hello!"

// String example
String str = "Hello!";
System.out.println(str); // Prints "Hello!"
LC 1903 largest odd number in string
The if() statement at the beginning of the method checks if the input string is empty. If it is, the method returns the empty string immediately.
The int n = num.length(); and char[] nums = num.toCharArray(); statements get the length of the input string and convert it to a character array, respectively.
The for() loop iterates over the character array in reverse order.
The if (nums[i] % 2 != 0) statement checks if the current character is odd. If it is, the method returns a substring of the character array from the beginning to the current index.
The return ""; statement at the end of the method is returned if the input string is empty or contains no odd digits.
class Solution {
    public String largestOddNumber(String num) {
        if (num.isEmpty()) {
            return "";
        }

        int n = num.length();
        char[] nums = num.toCharArray();

        for (int i = n - 1; i >= 0; i--) {
            if (nums[i] % 2 != 0) {
                return new String(nums, 0, i + 1);
            }
        }

        return "";
    }
}
......................................................................................
LC 242 VALID ANAGRAM
// class Solution {
//     public boolean isAnagram(String s, String t) {
        
//         char[]ss=s.toCharArray();
//         char[]ts=t.toCharArray();
//         if(ss.length!=ts.length){
//         return false;
//         }
//         Arrays.sort(ss);
//         Arrays.sort(ts);
//         for(int i=0;i<ss.length;i++){
             
//              if(  ss[i]!=ts[i])
//              return false;
//         }       
//         }
//                return true;
//     }
// }
class Solution {
  public boolean isAnagram(String s, String t) {
    char[] ss = s.toCharArray();
    char[] ts = t.toCharArray();

    // Check if the two strings have the same length.
    if (ss.length != ts.length) {
      return false;
    }

    // Sort the two strings.
    Arrays.sort(ss);
    Arrays.sort(ts);

    // Iterate over the sorted strings and compare the characters.
    for (int i = 0; i < ss.length; i++) {
      if (ss[i] != ts[i]) {
        return false;
      }
    }

    // If we reach this point, then the two strings are anagrams.
    return true;
  }
}
.................................................................................
LC 796 Rotate string
1.create stringbuilder to create substring to store (string builder are mutable i.e we can modify stringbuilder but not string)
2.get first character of sb and store in char ch
3.delete first character of sb
4.Append the character ch to the end of sb.
5.if sb==goal return true and increament
class Solution {
    public boolean rotateString(String s, String goal) {
        StringBuilder sb=new StringBuilder(s);
        int i=0;
       while(i<s.length()) 
       {
           char ch=sb.charAt(0);
           sb.deleteCharAt(0);
           sb.append(ch);
           if(sb.toString().equals(goal))
           return true;
           i++;
       }
       return false;
    }
}
...............................................................................................
LC 151 Reverse words in string
class Solution {
    public String reverseWords(String s) {
        // Trim the input string to remove leading and trailing spaces
        String[] str = s.trim().split("\\s+");

        // Initialize the output string
        String out = "";

        // Iterate through the words in reverse order
        for (int i = str.length - 1; i > 0; i--) {
            // Append the current word and a space to the output
            out += str[i] + " ";
        }

        // Append the first word to the output (without trailing space)
        return out + str[0];
    }
}
......................................................................
13.LC ROMAN INTEGERS


public class Solution {
    public int romanToInt(String s) {
        // Map to store roman numerals
        Map<Character, Integer> romanMap = new HashMap<>();
        // Fill the map
        romanMap.put('I', 1);
        romanMap.put('V', 5);
        romanMap.put('X', 10);
        romanMap.put('L', 50);
        romanMap.put('C', 100);
        romanMap.put('D', 500);
        romanMap.put('M', 1000);
        // Length of the given string
        int n = s.length();
        // Variable to store result
        int num = romanMap.get(s.charAt(n - 1));
        // Loop for each character from right to left
        for (int i = n - 2; i >= 0; i--) {
            // Check if the character at right of current character is
            // bigger or smaller
            if (romanMap.get(s.charAt(i)) >= romanMap.get(s.charAt(i + 1))) {
                num += romanMap.get(s.charAt(i));
            } else {
                num -= romanMap.get(s.charAt(i));
            }
        }
        return num;
    }

    public static void main(String[] args) {
        Solution solution = new Solution();
        String romanNumeral = "MCMXCIV";
        int result = solution.romanToInt(romanNumeral);
        System.out.println("Roman numeral " + romanNumeral + " is equivalent to " + result);
    }
}
.....................................................................
LC 451 SORT ARRAYS BY FREQUENCY
It initializes an array arr of size 256 to store the frequency of each character. This array is used to count the frequency of each character in the input string.

It iterates through the input string and increments the corresponding index in the arr array for each character's ASCII value.

It initializes a StringBuilder named sb to build the sorted string efficiently.

It uses a while loop to sort the characters based on their frequency. The loop continues until the max frequency becomes 0 (indicating all characters have been processed).

Inside the loop, it finds the character with the maximum frequency and appends that character to the sb StringBuilder 'max' times (equal to its frequency).

It sets the frequency of the processed character to 0 in the arr array to mark it as processed.

Finally, it returns the sorted string by calling sb.toString().
class Solution {
    public String frequencySort(String s) {
        char[] arr = new char[256];
    for(int i=0; i<s.length(); i++){
        arr[s.charAt(i)]++;    
    }
    
    StringBuilder sb = new StringBuilder();
    int max = -1;
    while(max != 0){
        max = -1;
        char maxi = 0;
        for(char i=0; i<arr.length; i++){
            if(arr[i] > max){
                max = arr[i];
                maxi = i;
            }
        }
        for(int i=0; i<max; i++){
            sb.append(maxi);   
        }
        arr[maxi] = 0;
    }
    return sb.toString();
        
    }
}
