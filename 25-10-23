1.find union of twoarrays
package dsa;

import java.util.ArrayList;
import java.util.HashMap;
public class unionOfTwoArrays {
	static ArrayList<Integer> FindUnion(int arr1[],int arr2[],int m,int n){
		HashMap <Integer,Integer > freq=new HashMap<>();
		  ArrayList<Integer> Union=new ArrayList<>();
		  for (int i = 0; i < n; i++)
		    freq.put(arr1[i],freq.getOrDefault(arr1[i],0)+1);
		    
		  for (int i = 0; i < m; i++)
		    freq.put(arr2[i],freq.getOrDefault(arr2[i],0)+1);
		  for (int it: freq.keySet())
			  
		    Union.add(it);
		  return Union;
		}

		public static void main(String args[]) {
		  int n = 8, m = 8;
		  int arr1[] = {1, 2, 3, 4, 5, 6, 7, 8};
		  int arr2[] = {2, 3, 4, 4, 5, 11, 12,13};
		  ArrayList<Integer> Union = FindUnion(arr1, arr2, n, m);
		  System.out.println("Union of arr1 and arr2 is ");
		  for (int val: Union)
		    System.out.print(val+" ");
		}
		}
  ......................................................................................................
  2.move zeros at end of array using two pinter approach
  package dsa;

public class Move_Zeros_at_end_of_array {
public static int[] movezeros(int a[],int n){
	int j=-1;
	for(int i=0;i<n;i++) {
		if(a[i]==0) {
			j=i;
			break;
		}
	}
	if(j==-1)
		return a;
	for(int i=j+1;i<n;i++) {
		if(a[i]!=0) {//if ith term non zero swap with jth term on left side and j++
			int temp=a[i];
			a[i]=a[j];
			a[j]=temp;
			j++;
		}
	}
	return a;
}
public static void main(String[] args) {
	int[]arr= {1,7,5,4,0,5,0,7,0,0,7,1};
	int n=12;
	int[] ans=movezeros(arr,n);
	for(int i=0;i<n;i++) {
		System.out.print(ans[i]+" ");
	}
	  System.out.println("");
}
}
....................................................
3.missing no.
package dsa;

public class missingNumbers {
public static int missingNumbers(int []a, int N) {
	


	        //Summation of first N numbers:
	        int sum = (N * (N + 1)) / 2;

	        //Summation of all array elements:
	        int s2 = 0;
	       for (int i = 0; i < N - 1; i++) {
	            s2 += a[i];
	        }

	        int missingNum = sum - s2;
	        return missingNum;
	    }

	    public static void main(String args[]) {
	        int N = 5;
	        int a[] = {1, 2, 4, 5};

	        int ans = missingNumbers(a, N);
	        System.out.println("The missing number is: " + ans);
	    }
	} 
 .......................................................
 4.maxConsecutiveOnesin array
 package dsa;
public class MaxConsecutiveOnes {
static int maxConsecutiveones(int arr []) {
	int count=0;
	int maxCount=0;
	for(int i=0;i<arr.length;i++) {
		if (arr[i]==1){
			count++;
		}else {
			count=0;
		}}
		maxCount=Math.max(maxCount, count);
	
	return maxCount;
}
public static void main(String args[]) {
	int arr[]= {1,1,4,5,7,8,1,1,1,1,2,1};
	
	int ans = maxConsecutiveones(arr);
	 System.out.println("The missing number is: " + ans);
}
}
in LC above code gives error
class Solution {
    public int findMaxConsecutiveOnes(int[] nums) {
        int count =0;
        int max= 0;
        for(int i=0;i<nums.length;i++){
            if(nums[i]==1){
            count++;
            }else{
                max= Math.max(max,count);
                count=0;
            }
        }
       max= Math.max(max,count);
       count = 0;
       return max;
    }
}
......................................................................
5.Single number LC q.136
class Solution {
    public int singleNumber(int[] nums) {
      int count=0;
      for(int i=0;i<nums.length;i++){
    count=count^nums[i];//xor operator as 0 0=0 //0 xor 0 is 0
                                        //0 1=1
                                        //1 0=1
                                        //1 1=0
      }  
      return count;
    }
}
..............................................................
